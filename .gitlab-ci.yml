# Copyright (C) 2023  Christian Berger
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: $CI_REGISTRY/courses/dit638/students/2024-group-21/docker:26.0.1

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  CI_BUILDX_ARCHS: "linux/amd64,linux/arm64,linux/arm/v7"
  BUILDX_URL: https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64

# We are running Docker inside Docker
services:
  - name: $CI_REGISTRY/courses/dit638/students/2024-group-21/docker:26.0.1-dind
    alias: docker

stages:
  - build
  - deploy
  - publish

# Display information before we start the build job.
before_script:
  - uname -m # print runner architecture (eg. x86-64 or ARM)
  - uname -a # print info about operating system
  - docker info # print info about docker installation and environment
  - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

# This section describes what shall be done to build and test the project.
build-and-test:
  tags:
    - docker-build
  stage: build
  script:
    # build microservice
    - cd cpp-opencv
    - docker build -t anglecalculator -f Dockerfile .
    
    # run and test microservice
    - docker run -d --name test-container anglecalculator
    - docker logs --follow test-container
    #- docker cp test-container:/opt/coverage.info $CI_PROJECT_DIR/coverage.info
    #- docker cp test-container:/opt/out $CI_PROJECT_DIR/out
    - docker stop test-container
    - docker rm test-container

    # run microservice in recordings folder
    - cd ../recordings 
    - ls
    # TODO: establish access to other microservices using shell scripts
    - docker run --rm --net=host --ipc=host -e DISPLAY=$DISPLAY -v /tmp:/tmp anglecalculator:latest --cid=253 --name=img --width=640 --height=480 --verbose
    - cd -
  artifacts:
    paths:
      #- coverage.info
      #- out/
  except:
    - tags  # This prevents the build-and-test job from running on new tags

# This section describes what shall be done to deploy artefacts from the project.
release:
  tags:
    - docker-build
  stage: deploy
  before_script:
    - mkdir -p ~/.docker/cli-plugins
    - wget -O ~/.docker/cli-plugins/docker-buildx $BUILDX_URL
    - chmod 755 ~/.docker/cli-plugins/docker-buildx
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx create --name platformbuilder --use
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx inspect --bootstrap
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx ls df -h
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
  script:
    - cd cpp-opencv
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform $CI_BUILDX_ARCHS -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push .
  only:
    - tags
    - /^v\d+\.\d+\.\d+(-rc\.\d+)?(-[a-zA-Z]+(\d+)?)?$/  # This regex matches semantic versioning